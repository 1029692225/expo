{"version":3,"file":"AppLoading.js","sourceRoot":"","sources":["../src/AppLoading.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAChD,OAAO,KAAK,YAAY,MAAM,gBAAgB,CAAC;AAE/C,OAAO,EAAE,6BAA6B,EAAE,MAAM,oBAAoB,CAAC;AAEnE,MAAM,UAAU,GAA8B,KAAK,CAAC,EAAE;IACpD,MAAM,qBAAqB,GAAG,KAAK,CAAC,WAAW,CAAC,KAAK,IAAI,EAAE;QACzD,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;YACrB,OAAO;SACR;QAED,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;SACnF;QAED,IAAI;YACF,MAAM,KAAK,CAAC,UAAU,EAAE,CAAC;SAC1B;QAAC,OAAO,KAAK,EAAE;YACd,KAAK,CAAC,OAAQ,CAAC,KAAK,CAAC,CAAC;SACvB;gBAAS;YACR,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;SACpC;IACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,kDAAkD;IAE1D,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,UAAU,CAAC,mBAAmB,CAAC,CAAC;QAChC,qBAAqB,EAAE,CAAC;QACxB,YAAY,CAAC,oBAAoB,EAAE,CAAC;QAEpC,OAAO,GAAG,EAAE;YACV,KAAK,CAAC,cAAc,IAAI,gBAAgB,EAAE,CAAC;YAC3C,UAAU,CAAC,sBAAsB,CAAC,CAAC;QACrC,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,kDAAkD;IAE1D,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,UAAU,CAAC,YAAY,GAAG;IACxB,cAAc,EAAE,IAAI;IACpB,OAAO,EAAE,KAAK,CAAC,EAAE,CACf,OAAO,CAAC,KAAK,CAAC,uDAAuD,KAAK,CAAC,KAAK,EAAE,CAAC;CACtF,CAAC;AAEF,eAAe,UAAU,CAAC;AAS1B;;;GAGG;AACH,SAAS,gBAAgB;IACvB,aAAa;IACb,IAAI,MAAM,CAAC,OAAO,EAAE;QAClB,YAAY,CAAC,SAAS,EAAE,CAAC;KAC1B;SAAM;QACL,UAAU,CAAC,GAAG,EAAE;YACd,YAAY,CAAC,SAAS,EAAE,CAAC;QAC3B,CAAC,EAAE,GAAG,CAAC,CAAC;KACT;AACH,CAAC","sourcesContent":["import React from 'react';\n\nimport { _emitEvent } from './LifecycleEmitter';\nimport * as SplashScreen from './SplashScreen';\n\nexport { getAppLoadingLifecycleEmitter } from './LifecycleEmitter';\n\nconst AppLoading: React.FC<AppLoadingProps> = props => {\n  const startLoadingResources = React.useCallback(async () => {\n    if (!props.startAsync) {\n      return;\n    }\n\n    if (!props.onFinish) {\n      throw new Error('AppLoading onFinish prop is required if startAsync is provided');\n    }\n\n    try {\n      await props.startAsync();\n    } catch (error) {\n      props.onError!(error);\n    } finally {\n      props.onFinish && props.onFinish();\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  React.useEffect(() => {\n    _emitEvent('componentDidMount');\n    startLoadingResources();\n    SplashScreen.preventAutoHideAsync();\n\n    return () => {\n      props.autoHideSplash && hideSplashScreen();\n      _emitEvent('componentWillUnmount');\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return null;\n};\n\nAppLoading.defaultProps = {\n  autoHideSplash: true,\n  onError: error =>\n    console.error(`AppLoading threw an unexpected error when loading:\\n${error.stack}`),\n};\n\nexport default AppLoading;\n\nexport type AppLoadingProps = {\n  startAsync?: () => Promise<void>;\n  onError?: (error: Error) => void;\n  onFinish?: () => void;\n  autoHideSplash?: boolean;\n};\n\n/**\n * Hide the splash screen using a timeout of 200ms.\n * If the environment is running in E2E testing mode, it will execute directly.\n */\nfunction hideSplashScreen() {\n  // @ts-ignore\n  if (global.__E2E__) {\n    SplashScreen.hideAsync();\n  } else {\n    setTimeout(() => {\n      SplashScreen.hideAsync();\n    }, 200);\n  }\n}\n"]}