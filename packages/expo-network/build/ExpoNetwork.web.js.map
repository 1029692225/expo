{"version":3,"file":"ExpoNetwork.web.js","sourceRoot":"","sources":["../src/ExpoNetwork.web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAgB,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AAEjE,eAAe;IACb,KAAK,CAAC,iBAAiB;QACrB,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;YAC3C,IAAI;gBACF,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,mCAAmC,CAAC,CAAC;gBAC9D,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;gBAC/B,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aAClB;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,CAAC,CAAC,CAAC,CAAC;aACX;QACH,CAAC,CACA,CAAC;IACJ,CAAC;IACD,KAAK,CAAC,oBAAoB;QACxB,IAAI,IAAI,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC;QAC/E,IAAI,WAAW,GAAG,SAAS,CAAC,MAAM,CAAC;QACnC,IAAI,mBAAmB,GAAG,WAAW,CAAC;QACtC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC7B,OAAO,CAAC;gBACN,IAAI;gBACJ,WAAW;gBACX,mBAAmB;aACpB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IACD,KAAK,CAAC,kBAAkB;QACtB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC7B,OAAO,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAC","sourcesContent":["import { NetworkState, NetworkStateType } from './Network.types';\n\nexport default {\n  async getIpAddressAsync(): Promise<string> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const resp = await fetch('https://api.ipify.org?format=json');\n        const data = await resp.json();\n        resolve(data.ip);\n      } catch (e) {\n        reject(e);\n      }\n    }\n    );\n  },\n  async getNetworkStateAsync(): Promise<NetworkState> {\n    let type = navigator.onLine ? NetworkStateType.UNKNOWN : NetworkStateType.NONE;\n    let isConnected = navigator.onLine;\n    let isInternetReachable = isConnected;\n    return new Promise((resolve) => {\n      resolve({\n        type,\n        isConnected,\n        isInternetReachable,\n      });\n    });\n  },\n  async getMacAddressAsync(): Promise<null> {\n    return new Promise((resolve) => {\n      resolve(null);\n    });\n  }\n};\n"]}