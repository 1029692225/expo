{"version":3,"file":"Application.js","sourceRoot":"","sources":["../src/Application.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAEjE,OAAO,eAAe,MAAM,mBAAmB,CAAC;AAEhD,MAAM,CAAC,MAAM,wBAAwB,GAAG,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,wBAAwB,CAAC,CAAC,CAAC,IAAI,CAAC;AAC1G,MAAM,CAAC,MAAM,kBAAkB,GAAG,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC;AAC9F,MAAM,CAAC,MAAM,eAAe,GAAG,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC;AACxF,MAAM,CAAC,MAAM,QAAQ,GAAG,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;AAC1E,MAAM,CAAC,IAAI,SAAS,CAAC;AACrB,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;IAClD,SAAS,GAAG,IAAI,CAAC;CAClB;KAAM;IACL,SAAS,GAAG,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;CAChE;AAED,MAAM,CAAC,KAAK,UAAU,uBAAuB;IAC3C,IAAI,CAAC,eAAe,CAAC,uBAAuB,EAAE;QAC5C,MAAM,IAAI,mBAAmB,CAAC,kBAAkB,EAAE,yBAAyB,CAAC,CAAC;KAC9E;IACD,OAAO,MAAM,eAAe,CAAC,uBAAuB,EAAE,CAAC;AACzD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,sBAAsB;IAC1C,IAAI,CAAC,eAAe,CAAC,sBAAsB,EAAE;QAC3C,MAAM,IAAI,mBAAmB,CAAC,kBAAkB,EAAE,wBAAwB,CAAC,CAAC;KAC7E;IACD,OAAO,MAAM,eAAe,CAAC,sBAAsB,EAAE,CAAC;AACxD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB;IAC5C,IAAI,CAAC,eAAe,CAAC,wBAAwB,EAAE;QAC7C,MAAM,IAAI,mBAAmB,CAAC,kBAAkB,EAAE,0BAA0B,CAAC,CAAC;KAC/E;IACD,IAAI,gBAAgB,GAAG,MAAM,eAAe,CAAC,wBAAwB,EAAE,CAAC;IACxE,OAAO,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC;AACpC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,sBAAsB;IAC1C,IAAI,CAAC,eAAe,CAAC,sBAAsB,EAAE;QAC3C,MAAM,IAAI,mBAAmB,CAAC,kBAAkB,EAAE,wBAAwB,CAAC,CAAC;KAC7E;IACD,IAAI,cAAc,GAAG,MAAM,eAAe,CAAC,sBAAsB,EAAE,CAAC;IACpE,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC;AAClC,CAAC","sourcesContent":["import { Platform, UnavailabilityError } from '@unimodules/core';\n\nimport ExpoApplication from './ExpoApplication';\n\nexport const nativeApplicationVersion = ExpoApplication ? ExpoApplication.nativeApplicationVersion : null;\nexport const nativeBuildVersion = ExpoApplication ? ExpoApplication.nativeBuildVersion : null;\nexport const applicationName = ExpoApplication ? ExpoApplication.applicationName : null;\nexport const bundleId = ExpoApplication ? ExpoApplication.bundleId : null;\nexport let androidId;\nif (Platform.OS === 'ios' || Platform.OS === 'web') {\n  androidId = null;\n} else {\n  androidId = ExpoApplication ? ExpoApplication.androidId : null;\n}\n\nexport async function getInstallReferrerAsync(): Promise<string> {\n  if (!ExpoApplication.getInstallReferrerAsync) {\n    throw new UnavailabilityError('expo-application', 'getInstallReferrerAsync');\n  }\n  return await ExpoApplication.getInstallReferrerAsync();\n}\n\nexport async function getIosIdForVendorAsync(): Promise<string> {\n  if (!ExpoApplication.getIosIdForVendorAsync) {\n    throw new UnavailabilityError('expo-application', 'getIosIdForVendorAsync');\n  }\n  return await ExpoApplication.getIosIdForVendorAsync();\n}\n\nexport async function getFirstInstallTimeAsync(): Promise<Date> {\n  if (!ExpoApplication.getFirstInstallTimeAsync) {\n    throw new UnavailabilityError('expo-application', 'getFirstInstallTimeAsync');\n  }\n  let firstInstallTime = await ExpoApplication.getFirstInstallTimeAsync();\n  return new Date(firstInstallTime);\n}\n\nexport async function getLastUpdateTimeAsync(): Promise<Date> {\n  if (!ExpoApplication.getLastUpdateTimeAsync) {\n    throw new UnavailabilityError('expo-application', 'getLastUpdateTimeAsync');\n  }\n  let lastUpdateTime = await ExpoApplication.getLastUpdateTimeAsync();\n  return new Date(lastUpdateTime);\n}\n"]}