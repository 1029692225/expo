{"version":3,"file":"Bluetooth.js","sourceRoot":"","sources":["../src/Bluetooth.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AAEnC,OAAO,EAAE,OAAO,IAAI,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAC/D,OAAO,EAAE,OAAO,IAAI,WAAW,EAAE,MAAM,eAAe,CAAC;AACvD,OAAO,EAAE,OAAO,IAAI,QAAQ,EAAE,MAAM,YAAY,CAAC;AAEjD;;;;;GAKG;AACH,MAAM,UAAU,kBAAkB,CAAC,GAAW;IAC5C,gEAAgE;IAChE,6DAA6D;IAC7D,wBAAwB;IACxB,MAAM,KAAK,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IACrF,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC5B,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,kBAAkB,CAAC,GAAW;IAC5C,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAChC,MAAM,oBAAoB,GAAG,MAAM;SAChC,KAAK,CAAC,EAAE,CAAC;SACT,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;SAC/D,IAAI,CAAC,EAAE,CAAC,CAAC;IACZ,OAAO,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;AAClD,CAAC","sourcesContent":["import { Base64 } from 'js-base64';\n\nexport { default as Characteristics } from './Characteristics';\nexport { default as Descriptors } from './Descriptors';\nexport { default as Services } from './Services';\n\n/*\n * Convert a JS value before sending it to native.\n * 1. Use encodeURIComponent to get percent-encoded UTF-8 string value.\n * 2. Convert the percent-encodings to raw bytes.\n * 3. Pass value to Base64.btoa (Binary to ASCII)\n */\nexport function encodeBinaryString(str: string): string {\n  // first we use encodeURIComponent to get percent-encoded UTF-8,\n  // then we convert the percent encodings into raw bytes which\n  // can be fed into btoa.\n  const input = encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (m, p) => `0x${p}`);\n  return Base64.btoa(input);\n}\n\n/*\n * Take a native value and convert it to a JS value.\n * 1. Create binary value from input string\n * 2. Convert the raw bytes to percent-encodings.\n * 3. Decode the raw bytes\n */\nexport function decodeBinaryString(str: string): string {\n  const binary = Base64.atob(str);\n  const modifiedBinaryString = binary\n    .split('')\n    .map(c => `%${('00' + c.charCodeAt(0).toString(16)).slice(-2)}`)\n    .join('');\n  return decodeURIComponent(modifiedBinaryString);\n}\n"]}