{"version":3,"file":"TaskManager.types.js","sourceRoot":"","sources":["../src/TaskManager.types.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Error object that can be received through TaskManagerTaskBody when the task fails.\n */\nexport interface TaskManagerError {\n  code: string | number;\n  message: string;\n}\n\n/**\n * Represents the object that is passed to the task executor.\n */\nexport interface TaskManagerTaskBody {\n  /**\n   * An object of data passed to the task executor. Its properties depends on the type of the task.\n   */\n  data: object;\n\n  /**\n   * Error object if the task failed or `null` otherwise.\n   */\n  error: TaskManagerError | null;\n\n  /**\n   * Additional details containing unique ID of task event and name of the task.\n   */\n  executionInfo: {\n    eventId: string;\n    taskName: string;\n  };\n}\n\n/**\n * Represents an already registered task.\n */\nexport interface TaskManagerTask {\n  /**\n   * Name that the task is registered with.\n   */\n  taskName: string;\n\n  /**\n   * Type of the task which depends on how the task was registered.\n   */\n  taskType: string;\n\n  /**\n   * Provides `options` that the task was registered with.\n   */\n  options: any;\n}\n\n/**\n * @deprecated in favor of TaskManagerTask.\n */\nexport interface RegisteredTask extends TaskManagerTask {}\n\n/**\n * Type of task executor â€“ a function that handles the task.\n */\nexport type TaskManagerTaskExecutor = (body: TaskManagerTaskBody) => void;\n"]}