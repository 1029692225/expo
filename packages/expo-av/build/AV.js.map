{"version":3,"file":"AV.js","sourceRoot":"","sources":["../src/AV.ts"],"names":[],"mappings":"AAAA,OAAO,UAAU,MAAM,cAAc,CAAC;AACtC,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AACnC,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAC5C,YAAY;AACZ,yBAAyB;AACzB,uDAAuD;AACvD,OAAO;AACP,SAAS;AACT,mDAAmD;AACnD,wCAAwC;AACxC,iBAAiB;AAEjB,MAAM,CAAN,IAAY,sBAIX;AAJD,WAAY,sBAAsB;IAChC,uDAAM,UAAU,IAAI,UAAU,CAAC,SAAS,IAAI,UAAU,CAAC,SAAS,CAAC,GAAG,SAAA,CAAA;IACpE,0DAAS,UAAU,IAAI,UAAU,CAAC,SAAS,IAAI,UAAU,CAAC,SAAS,CAAC,MAAM,YAAA,CAAA;IAC1E,wDAAO,UAAU,IAAI,UAAU,CAAC,SAAS,IAAI,UAAU,CAAC,SAAS,CAAC,IAAI,UAAA,CAAA;AACxE,CAAC,EAJW,sBAAsB,KAAtB,sBAAsB,QAIjC;AA6CD,MAAM,CAAC,MAAM,wCAAwC,GAAW,GAAG,CAAC;AACpE,MAAM,CAAC,MAAM,gCAAgC,GAAmB;IAC9D,4BAA4B,EAAE,wCAAwC;IACtE,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,GAAG;IACT,kBAAkB,EAAE,KAAK;IACzB,MAAM,EAAE,GAAG;IACX,OAAO,EAAE,KAAK;IACd,SAAS,EAAE,KAAK;CACjB,CAAC;AAEF,MAAM,UAAU,yBAAyB,CACvC,MAA6B;IAE7B,IAAI,GAAG,GAAkB,IAAI,CAAC;IAC9B,IAAI,mBAAmB,GAAkB,IAAI,CAAC;IAC9C,IAAI,OAAoD,CAAC;IAEzD,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACvD,OAAO;YACL,GAAG,EAAE,MAAM;YACX,mBAAmB;YACnB,OAAO;SACR,CAAC;KACH;IAED,IAAI,KAAK,GAAiB,2BAA2B,CAAC,MAAM,CAAC,CAAC;IAC9D,IAAI,KAAK,IAAI,IAAI,EAAE;QACjB,GAAG,GAAG,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,GAAG,CAAC;KACnC;SAAM,IACL,MAAM,IAAI,IAAI;QACd,OAAO,MAAM,KAAK,QAAQ;QAC1B,KAAK,IAAI,MAAM;QACf,OAAO,MAAM,CAAC,GAAG,KAAK,QAAQ,EAC9B;QACA,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;KAClB;IAED,IAAI,GAAG,IAAI,IAAI,EAAE;QACf,OAAO,IAAI,CAAC;KACb;IAED,IACE,MAAM,IAAI,IAAI;QACd,OAAO,MAAM,KAAK,QAAQ;QAC1B,8BAA8B,IAAI,MAAM;QACxC,OAAO,MAAM,CAAC,4BAA4B,KAAK,QAAQ,EACvD;QACA,mBAAmB,GAAG,MAAM,CAAC,4BAA4B,CAAC;KAC3D;IAED,IACE,MAAM,IAAI,IAAI;QACd,OAAO,MAAM,KAAK,QAAQ;QAC1B,SAAS,IAAI,MAAM;QACnB,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,EAClC;QACA,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;KAC1B;IACD,OAAO,EAAE,GAAG,EAAE,mBAAmB,EAAE,OAAO,EAAE,CAAC;AAC/C,CAAC;AAED,SAAS,2BAA2B,CAAC,MAA6B;IAChE,IAAI,MAAM,IAAI,IAAI,EAAE;QAClB,OAAO,IAAI,CAAC;KACb;IAED,IAAI,KAAK,GAAiB,IAAI,CAAC;IAC/B,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QAC9B,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;KAClC;SAAM,IAAI,MAAM,YAAY,KAAK,EAAE;QAClC,KAAK,GAAG,MAAM,CAAC;KAChB;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,0BAA0B,CAAC,MAAsB;IAC/D,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,IAAI,MAAM,CAAC,IAAI,GAAG,EAAE,CAAC,EAAE;QAC5E,MAAM,IAAI,UAAU,CAAC,yCAAyC,CAAC,CAAC;KACjE;IACD,IAAI,OAAO,MAAM,CAAC,MAAM,KAAK,QAAQ,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;QACjF,MAAM,IAAI,UAAU,CAAC,0CAA0C,CAAC,CAAC;KAClE;AACH,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,+CAA+C,CACnE,MAA6B,EAC7B,aAAoC,EACpC,aAAsB;IAKtB,8BAA8B;IAC9B,MAAM,iBAAiB,GACrB,aAAa,IAAI,IAAI;QACnB,CAAC,CAAC,gCAAgC;QAClC,CAAC,CAAC;YACE,GAAG,gCAAgC;YACnC,GAAG,aAAa;SACjB,CAAC;IACR,0BAA0B,CAAC,iBAAiB,CAAC,CAAC;IAE9C,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACvD,OAAO;YACL,YAAY,EAAE;gBACZ,GAAG,EAAE,MAAM;gBACX,mBAAmB,EAAE,IAAI;aAC1B;YACD,iBAAiB;SAClB,CAAC;KACH;IAED,+BAA+B;IAC/B,IAAI,KAAK,GAAG,2BAA2B,CAAC,MAAM,CAAC,CAAC;IAChD,IAAI,aAAa,IAAI,KAAK,EAAE;QAC1B,mFAAmF;QACnF,MAAM,KAAK,CAAC,aAAa,EAAE,CAAC;KAC7B;IAED,wBAAwB;IACxB,MAAM,YAAY,GAAgC,yBAAyB,CAAC,MAAM,CAAC,CAAC;IAEpF,IAAI,YAAY,KAAK,IAAI,EAAE;QACzB,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;KACxE;IAED,OAAO,EAAE,YAAY,EAAE,iBAAiB,EAAE,CAAC;AAC7C,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,QAAuB,IAAI;IAC3D,OAAO;QACL,QAAQ,EAAE,KAAK;QACf,SAAS,EAAE,KAAK;QAChB,SAAS,EAAE,KAAK;QAChB,WAAW,EAAE,KAAK;QAClB,aAAa,EAAE,KAAK;KACrB,CAAC;AACJ,CAAC;AA6BD;;;GAGG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG;IAC3B,KAAK,CAAC,SAAS;QACb,OAAS,IAAmB,CAAC,cAAc,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;IACpE,CAAC;IAED,KAAK,CAAC,qBAAqB,CACzB,cAAsB,EACtB,aAAgF,EAAE;QAElF,OAAS,IAAmB,CAAC,cAAc,CAAC;YAC1C,eAAe,EAAE,cAAc;YAC/B,UAAU,EAAE,IAAI;YAChB,wBAAwB,EAAE,UAAU,CAAC,oBAAoB;YACzD,yBAAyB,EAAE,UAAU,CAAC,qBAAqB;SAC5D,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,UAAU;QACd,OAAS,IAAmB,CAAC,cAAc,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;IACrE,CAAC;IAED,KAAK,CAAC,SAAS;QACb,OAAS,IAAmB,CAAC,cAAc,CAAC,EAAE,eAAe,EAAE,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;IACzF,CAAC;IAED,KAAK,CAAC,gBAAgB,CACpB,cAAsB,EACtB,aAAgF,EAAE;QAElF,OAAS,IAAmB,CAAC,cAAc,CAAC;YAC1C,eAAe,EAAE,cAAc;YAC/B,wBAAwB,EAAE,UAAU,CAAC,oBAAoB;YACzD,yBAAyB,EAAE,UAAU,CAAC,qBAAqB;SAC5D,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,YAAY,CAChB,IAAY,EACZ,qBAA8B,KAAK,EACnC,yBAAiD,sBAAsB,CAAC,GAAG;QAE3E,OAAS,IAAmB,CAAC,cAAc,CAAC;YAC1C,IAAI;YACJ,kBAAkB;YAClB,sBAAsB;SACvB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,MAAc;QACjC,OAAS,IAAmB,CAAC,cAAc,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IAC1D,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,OAAgB;QACpC,OAAS,IAAmB,CAAC,cAAc,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,SAAkB;QACxC,OAAS,IAAmB,CAAC,cAAc,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED,KAAK,CAAC,8BAA8B,CAClC,4BAAoC;QAEpC,OAAS,IAAmB,CAAC,cAAc,CAAC,EAAE,4BAA4B,EAAE,CAAC,CAAC;IAChF,CAAC;CACF,CAAC","sourcesContent":["import ExponentAV from './ExponentAV';\nimport { Asset } from 'expo-asset';\nimport { Platform } from '@unimodules/core';\n// TODO add:\n//  disableFocusOnAndroid\n//  audio routes (at least did become noisy on android)\n//  pan\n//  pitch\n//  API to explicitly request audio focus / session\n//  API to select stream type on Android\n//  subtitles API\n\nexport enum PitchCorrectionQuality {\n  Low = ExponentAV && ExponentAV.Qualities && ExponentAV.Qualities.Low,\n  Medium = ExponentAV && ExponentAV.Qualities && ExponentAV.Qualities.Medium,\n  High = ExponentAV && ExponentAV.Qualities && ExponentAV.Qualities.High,\n}\n\nexport type PlaybackSource =\n  | number\n  | {\n      uri: string;\n      overrideFileExtensionAndroid?: string;\n      headers?: { [fieldName: string]: string };\n    }\n  | Asset;\n\nexport type PlaybackNativeSource = {\n  uri: string;\n  overridingExtension?: string | null;\n  headers?: { [fieldName: string]: string };\n};\n\nexport type PlaybackParams = {\n  uri?: string;\n  initialPosition?: number;\n  androidImplementation?: string;\n  progressUpdateIntervalMillis?: number;\n  rate?: number;\n  shouldCorrectPitch?: boolean;\n  volume?: number;\n  isMuted?: boolean;\n  isLooping?: boolean;\n  shouldPlay?: boolean;\n  seekMillisToleranceBefore?: number;\n  seekMillisToleranceAfter?: number;\n  pitchCorrectionQuality?: PitchCorrectionQuality;\n};\n\nexport type PlaybackStatus = {\n  isLoaded: boolean;\n  error?: string;\n  durationMillis?: number;\n  positionMillis?: number;\n  playableDurationMillis?: number;\n  isPlaying: boolean;\n  isLoading: boolean;\n  isBuffering: boolean;\n  didJustFinish: boolean;\n};\n\nexport const _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS: number = 500;\nexport const _DEFAULT_INITIAL_PLAYBACK_PARAMS: PlaybackParams = {\n  progressUpdateIntervalMillis: _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  shouldPlay: false,\n  rate: 1.0,\n  shouldCorrectPitch: false,\n  volume: 1.0,\n  isMuted: false,\n  isLooping: false,\n};\n\nexport function getNativeSourceFromSource(\n  source: PlaybackSource | null\n): PlaybackNativeSource | null {\n  let uri: string | null = null;\n  let overridingExtension: string | null = null;\n  let headers: { [fieldName: string]: string } | undefined;\n\n  if (typeof source === 'string' && Platform.OS === 'web') {\n    return {\n      uri: source,\n      overridingExtension,\n      headers,\n    };\n  }\n\n  let asset: Asset | null = _getAssetFromPlaybackSource(source);\n  if (asset != null) {\n    uri = asset.localUri || asset.uri;\n  } else if (\n    source != null &&\n    typeof source !== 'number' &&\n    'uri' in source &&\n    typeof source.uri === 'string'\n  ) {\n    uri = source.uri;\n  }\n\n  if (uri == null) {\n    return null;\n  }\n\n  if (\n    source != null &&\n    typeof source !== 'number' &&\n    'overrideFileExtensionAndroid' in source &&\n    typeof source.overrideFileExtensionAndroid === 'string'\n  ) {\n    overridingExtension = source.overrideFileExtensionAndroid;\n  }\n\n  if (\n    source != null &&\n    typeof source !== 'number' &&\n    'headers' in source &&\n    typeof source.headers === 'object'\n  ) {\n    headers = source.headers;\n  }\n  return { uri, overridingExtension, headers };\n}\n\nfunction _getAssetFromPlaybackSource(source: PlaybackSource | null): Asset | null {\n  if (source == null) {\n    return null;\n  }\n\n  let asset: Asset | null = null;\n  if (typeof source === 'number') {\n    asset = Asset.fromModule(source);\n  } else if (source instanceof Asset) {\n    asset = source;\n  }\n  return asset;\n}\n\nexport function assertStatusValuesInBounds(status: PlaybackParams): void {\n  if (typeof status.rate === 'number' && (status.rate < 0 || status.rate > 32)) {\n    throw new RangeError('Rate value must be between 0.0 and 32.0');\n  }\n  if (typeof status.volume === 'number' && (status.volume < 0 || status.volume > 1)) {\n    throw new RangeError('Volume value must be between 0.0 and 1.0');\n  }\n}\n\nexport async function getNativeSourceAndFullInitialStatusForLoadAsync(\n  source: PlaybackSource | null,\n  initialParams: PlaybackParams | null,\n  downloadFirst: boolean\n): Promise<{\n  nativeSource: PlaybackNativeSource;\n  fullInitialStatus: PlaybackParams;\n}> {\n  // Get the full initial status\n  const fullInitialStatus: PlaybackParams =\n    initialParams == null\n      ? _DEFAULT_INITIAL_PLAYBACK_PARAMS\n      : {\n          ..._DEFAULT_INITIAL_PLAYBACK_PARAMS,\n          ...initialParams,\n        };\n  assertStatusValuesInBounds(fullInitialStatus);\n\n  if (typeof source === 'string' && Platform.OS === 'web') {\n    return {\n      nativeSource: {\n        uri: source,\n        overridingExtension: null,\n      },\n      fullInitialStatus,\n    };\n  }\n\n  // Download first if necessary.\n  let asset = _getAssetFromPlaybackSource(source);\n  if (downloadFirst && asset) {\n    // TODO we can download remote uri too once @nikki93 has integrated this into Asset\n    await asset.downloadAsync();\n  }\n\n  // Get the native source\n  const nativeSource: PlaybackNativeSource | null = getNativeSourceFromSource(source);\n\n  if (nativeSource === null) {\n    throw new Error(`Cannot load an AV asset from a null playback source`);\n  }\n\n  return { nativeSource, fullInitialStatus };\n}\n\nexport function getUnloadedStatus(error: string | null = null): PlaybackStatus {\n  return {\n    isLoaded: false,\n    isPlaying: false,\n    isLoading: false,\n    isBuffering: false,\n    didJustFinish: false,\n  };\n}\n\nexport interface AV {\n  setParamsAsync(status: PlaybackParams): Promise<PlaybackStatus>;\n}\n\nexport interface Playback extends AV {\n  playAsync(): Promise<PlaybackStatus>;\n  playFromPositionAsync(\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ): Promise<PlaybackStatus>;\n  pauseAsync(): Promise<PlaybackStatus>;\n  stopAsync(): Promise<PlaybackStatus>;\n  setPositionAsync(\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ): Promise<PlaybackStatus>;\n  setRateAsync(\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ): Promise<PlaybackStatus>;\n  setVolumeAsync(volume: number): Promise<PlaybackStatus>;\n  setIsMutedAsync(isMuted: boolean): Promise<PlaybackStatus>;\n  setIsLoopingAsync(isLooping: boolean): Promise<PlaybackStatus>;\n  setProgressUpdateIntervalAsync(progressUpdateIntervalMillis: number): Promise<PlaybackStatus>;\n}\n\n/**\n * A mixin that defines common playback methods for A/V classes so they implement the `Playback`\n * interface\n */\nexport const PlaybackMixin = {\n  async playAsync(): Promise<PlaybackStatus> {\n    return ((this as any) as AV).setParamsAsync({ shouldPlay: true });\n  },\n\n  async playFromPositionAsync(\n    positionMillis: number,\n    tolerances: { toleranceMillisBefore?: number; toleranceMillisAfter?: number } = {}\n  ): Promise<PlaybackStatus> {\n    return ((this as any) as AV).setParamsAsync({\n      initialPosition: positionMillis,\n      shouldPlay: true,\n      seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n      seekMillisToleranceBefore: tolerances.toleranceMillisBefore,\n    });\n  },\n\n  async pauseAsync(): Promise<PlaybackStatus> {\n    return ((this as any) as AV).setParamsAsync({ shouldPlay: false });\n  },\n\n  async stopAsync(): Promise<PlaybackStatus> {\n    return ((this as any) as AV).setParamsAsync({ initialPosition: 0, shouldPlay: false });\n  },\n\n  async setPositionAsync(\n    positionMillis: number,\n    tolerances: { toleranceMillisBefore?: number; toleranceMillisAfter?: number } = {}\n  ): Promise<PlaybackStatus> {\n    return ((this as any) as AV).setParamsAsync({\n      initialPosition: positionMillis,\n      seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n      seekMillisToleranceBefore: tolerances.toleranceMillisBefore,\n    });\n  },\n\n  async setRateAsync(\n    rate: number,\n    shouldCorrectPitch: boolean = false,\n    pitchCorrectionQuality: PitchCorrectionQuality = PitchCorrectionQuality.Low\n  ): Promise<PlaybackStatus> {\n    return ((this as any) as AV).setParamsAsync({\n      rate,\n      shouldCorrectPitch,\n      pitchCorrectionQuality,\n    });\n  },\n\n  async setVolumeAsync(volume: number): Promise<PlaybackStatus> {\n    return ((this as any) as AV).setParamsAsync({ volume });\n  },\n\n  async setIsMutedAsync(isMuted: boolean): Promise<PlaybackStatus> {\n    return ((this as any) as AV).setParamsAsync({ isMuted });\n  },\n\n  async setIsLoopingAsync(isLooping: boolean): Promise<PlaybackStatus> {\n    return ((this as any) as AV).setParamsAsync({ isLooping });\n  },\n\n  async setProgressUpdateIntervalAsync(\n    progressUpdateIntervalMillis: number\n  ): Promise<PlaybackStatus> {\n    return ((this as any) as AV).setParamsAsync({ progressUpdateIntervalMillis });\n  },\n};\n"]}