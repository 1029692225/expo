{"version":3,"file":"Device.js","sourceRoot":"","sources":["../src/Device.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform, UnavailabilityError } from '@unimodules/core';\nimport ExpoDevice from './ExpoDevice';\n\nimport { deviceNamesByCode } from './DeviceNameByCode';\nimport { DeviceType as _DeviceType } from './Device.types';\n\nexport{\n  _DeviceType as DeviceType\n}\n\n// enum DeviceType {\n//   PHONE = \"PHONE\",\n//   TABLET = \"TABLET\",\n//   DESKTOP = \"DESKTOP\",\n//   TV = \"TV\",\n//   UNKNOWN = \"UNKNOWN\"\n// }\n\nexport const brand = ExpoDevice ? ExpoDevice.brand : null;\nexport const manufacturer = ExpoDevice ? ExpoDevice.manufacturer : null;\nlet model;\nlet fingerprint;\nlet platformModelId;\nlet platformDesignName;\nlet platformProductName;\nlet platformApi;\nif (Platform.OS === 'ios') {\n  let deviceName;\n  let modelId = ExpoDevice.modelId;\n  if (modelId) {\n    deviceName = deviceNamesByCode[modelId];\n    if (!deviceName) {\n      // Not found on database. At least guess main device type from string contents:\n      if (modelId.startsWith('iPod')) {\n        deviceName = 'iPod Touch';\n      } else if (modelId.startsWith('iPad')) {\n        deviceName = 'iPad';\n      } else if (modelId.startsWith('iPhone')) {\n        deviceName = 'iPhone';\n      } else if (modelId.startsWith('AppleTV')) {\n        deviceName = 'Apple TV';\n      }\n    }\n  }\n  model = deviceName;\n  fingerprint = null;\n  platformModelId = ExpoDevice ? ExpoDevice.modelId : null;\n  platformDesignName = null;\n  platformProductName = null;\n  platformApi = null;\n} else {\n  model = ExpoDevice ? ExpoDevice.modelName : null;\n  fingerprint = ExpoDevice ? ExpoDevice.osBuildFingerprint : null;\n  platformModelId = null;\n  platformDesignName = ExpoDevice ? ExpoDevice.designName : null;\n  platformProductName = ExpoDevice ? ExpoDevice.productName : null;\n  platformApi = ExpoDevice ? ExpoDevice.platformApiLevel : null;\n}\nexport const osBuildFingerprint = fingerprint;\nexport const modelName = model;\nexport const modelId = platformModelId;\nexport const designName = platformDesignName;\nexport const productName = platformProductName;\nexport const platformApiLevel = platformApi;\nexport const osName = ExpoDevice ? ExpoDevice.osName : null;\nexport const totalMemory = ExpoDevice ? ExpoDevice.totalMemory : null;\nexport const isDevice = ExpoDevice ? ExpoDevice.isDevice : null;\nexport const supportedCpuArchitectures = ExpoDevice ? ExpoDevice.supportedCpuArchitectures : null;\nexport const osBuildId = ExpoDevice ? ExpoDevice.osBuildId : null;\nexport const osVersion = ExpoDevice ? ExpoDevice.osVersion : null;\nexport const deviceName = ExpoDevice ? ExpoDevice.deviceName : null;\nexport const osInternalBuildId = ExpoDevice ? ExpoDevice.osInternalBuildId : null;\nexport const deviceYearClass = ExpoDevice ? ExpoDevice.osInternalBuildId: null;\n\nexport async function hasPlatformFeatureAsync(feature: string): Promise<boolean> {\n  if (!ExpoDevice.hasPlatformFeatureAsync) {\n    throw new UnavailabilityError('expo-device', 'hasPlatformFeatureAsync');\n  }\n  return await ExpoDevice.hasPlatformFeatureAsync(feature);\n}\n\nexport async function getPlatformFeaturesAsync(): Promise<string[]> {\n  if (!ExpoDevice.getPlatformFeaturesAsync) {\n    throw new UnavailabilityError('expo-device', 'getPlatformFeaturesAsync');\n  }\n  return await ExpoDevice.getPlatformFeaturesAsync();\n}\n\nexport async function getMaxMemoryAsync(): Promise<number> {\n  if (!ExpoDevice.getMaxMemoryAsync) {\n    throw new UnavailabilityError('expo-device', 'getMaxMemoryAsync');\n  }\n  let maxMemory = await ExpoDevice.getMaxMemoryAsync();\n  if (maxMemory === -1) {\n    maxMemory = Number.MAX_SAFE_INTEGER;\n  }\n  return Promise.resolve(maxMemory);\n}\n\nexport async function isSideLoadingEnabled(): Promise<boolean> {\n  if (!ExpoDevice.isSideLoadingEnabled) {\n    throw new UnavailabilityError('expo-device', 'isSideLoadingEnabled');\n  }\n  return await ExpoDevice.isSideLoadingEnabled();\n}\n\nexport async function getUptimeAsync(): Promise<number> {\n  if (!ExpoDevice.getUptimeAsync) {\n    throw new UnavailabilityError('expo-device', 'getUptimeAsync');\n  }\n  return await ExpoDevice.getUptimeAsync();\n}\n\nexport async function isRootedExperimentalAsync(): Promise<boolean> {\n  if (!ExpoDevice.isRootedExperimentalAsync) {\n    throw new UnavailabilityError('expo-device', 'isRootedExperimentalAsync');\n  }\n  return await ExpoDevice.isRootedExperimentalAsync();\n}\n\nexport async function getDeviceTypeAsync(): Promise<_DeviceType> {\n  if (!ExpoDevice.getDeviceTypeAsync) {\n    throw new UnavailabilityError('expo-device', 'getDeviceTypeAsync');\n  }\n  const deviceType = await ExpoDevice.getDeviceTypeAsync();\n  switch (deviceType) {\n    case _DeviceType.PHONE:\n      return Promise.resolve(_DeviceType.PHONE);\n    case _DeviceType.TABLET:\n      return Promise.resolve(_DeviceType.TABLET);\n    case _DeviceType.TV:\n      return Promise.resolve(_DeviceType.TV);\n    case _DeviceType.DESKTOP:\n      return Promise.resolve(_DeviceType.DESKTOP);\n    default:\n      return Promise.resolve(_DeviceType.UNKNOWN);\n  }\n}\n"]}