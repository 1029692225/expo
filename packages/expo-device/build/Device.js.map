{"version":3,"file":"Device.js","sourceRoot":"","sources":["../src/Device.ts"],"names":[],"mappings":"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","sourcesContent":["import ExpoDevice from './ExpoDevice';\n\nimport { deviceNamesByCode } from './DeviceNameByCode';\n\nimport { Platform, UnavailabilityError } from '@unimodules/core';\n\nexport const brand = ExpoDevice ? ExpoDevice.brand : null;\nexport const manufacturer = ExpoDevice ? ExpoDevice.manufacturer : null;\nlet model;\nif (Platform.OS === 'ios') {\n  let deviceName;\n  let deviceId = ExpoDevice.deviceId;\n  if (deviceId) {\n    deviceName = deviceNamesByCode[deviceId];\n    if (!deviceName) {\n      // Not found on database. At least guess main device type from string contents:\n      if (deviceId.startsWith('iPod')) {\n        deviceName = 'iPod Touch';\n      } else if (deviceId.startsWith('iPad')) {\n        deviceName = 'iPad';\n      } else if (deviceId.startsWith('iPhone')) {\n        deviceName = 'iPhone';\n      } else if (deviceId.startsWith('AppleTV')) {\n        deviceName = 'Apple TV';\n      }\n    }\n  }\n  model = deviceName;\n} else {\n  model = ExpoDevice ? ExpoDevice.modelName : null;\n}\nexport const modelName = model;\nexport const osName = ExpoDevice ? ExpoDevice.osName : null;\nexport const totalMemory = ExpoDevice ? ExpoDevice.totalMemory : null;\nexport const isDevice = ExpoDevice ? ExpoDevice.isDevice : null;\nexport const deviceType = ExpoDevice ? ExpoDevice.deviceType : null;\nexport const modelId = ExpoDevice ? ExpoDevice.modelId : null;\nexport const supportedCPUArchitectures = ExpoDevice ? ExpoDevice.supportedCPUArchitectures : null;\nexport const designName = ExpoDevice ? ExpoDevice.designName : null;\nexport const systemBuildId = ExpoDevice ? ExpoDevice.systemBuildId : null;\nexport const productName = ExpoDevice ? ExpoDevice.productName : null;\nexport const platformAPILevel = ExpoDevice ? ExpoDevice.platformAPILevel : null;\nexport const osVersion = ExpoDevice ? ExpoDevice.osVersion : null;\nexport const deviceName = ExpoDevice ? ExpoDevice.deviceName : null;\nexport const osBuildFingerprint = ExpoDevice ? ExpoDevice.osBuildFingerprint : null;\nexport const osBuildId = ExpoDevice ? ExpoDevice.deviceName : null;\n\n\nexport async function hasPlatformFeatureAsync(feature: string): Promise<boolean> {\n  if (!ExpoDevice.hasPlatformFeatureAsync) {\n    throw new UnavailabilityError('expo-device', 'hasPlatformFeatureAsync');\n  }\n  return await ExpoDevice.hasPlatformFeatureAsync(feature);\n}\n\n\nexport async function getPlatformFeaturesAsync(): Promise<string[]> {\n  if (!ExpoDevice.getPlatformFeaturesAsync) {\n    throw new UnavailabilityError('expo-device', 'getPlatformFeaturesAsync');\n  }\n  return await ExpoDevice.getPlatformFeaturesAsync();\n}\n\nexport async function getMaxMemoryAsync(): Promise<number> {\n  if (!ExpoDevice.getMaxMemoryAsync) {\n    throw new UnavailabilityError('expo-device', 'getMaxMemoryAsync');\n  }\n  return await ExpoDevice.getMaxMemoryAsync();\n}\n\nexport async function isSideLoadingEnabled(): Promise<boolean> {\n  if (!ExpoDevice.isSideLoadingEnabled) {\n    throw new UnavailabilityError('expo-device', 'isSideLoadingEnabled');\n  }\n  return await ExpoDevice.isSideLoadingEnabled();\n}\n\nexport async function getUptimeAsync(): Promise<number> {\n  if (!ExpoDevice.getUptimeAsync) {\n    throw new UnavailabilityError('expo-device', 'getUptimeAsync');\n  }\n  return await ExpoDevice.getUptimeAsync();\n}\n"]}