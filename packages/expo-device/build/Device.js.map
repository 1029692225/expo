{"version":3,"file":"Device.js","sourceRoot":"","sources":["../src/Device.ts"],"names":[],"mappings":"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","sourcesContent":["import ExpoDevice from './ExpoDevice';\n\nimport { deviceNamesByCode } from './DeviceNameByCode';\nimport { devicesWithNotch } from './DeviceWithNotchConst';\n\nimport { Platform, UnavailabilityError } from '@unimodules/core';\n\nexport const brand = ExpoDevice ? ExpoDevice.brand : null;\nexport const manufacturer = ExpoDevice ? ExpoDevice.manufacturer : null;\nlet modelName;\nif (Platform.OS === 'ios') {\n  let deviceName;\n  let deviceId = ExpoDevice.deviceId;\n  if (deviceId) {\n    deviceName = deviceNamesByCode[deviceId];\n    if (!deviceName) {\n      // Not found on database. At least guess main device type from string contents:\n      if (deviceId.startsWith('iPod')) {\n        deviceName = 'iPod Touch';\n      } else if (deviceId.startsWith('iPad')) {\n        deviceName = 'iPad';\n      } else if (deviceId.startsWith('iPhone')) {\n        deviceName = 'iPhone';\n      } else if (deviceId.startsWith('AppleTV')) {\n        deviceName = 'Apple TV';\n      }\n    }\n  }\n  modelName = deviceName;\n} else {\n  modelName = ExpoDevice ? ExpoDevice.model : null;\n}\nexport const model = modelName;\nexport const systemName = ExpoDevice ? ExpoDevice.systemName : null;\nexport const totalMemory = ExpoDevice ? ExpoDevice.totalMemory : null;\nexport const uniqueId = ExpoDevice ? ExpoDevice.uniqueId : null;\nexport const isTablet = ExpoDevice ? ExpoDevice.isTablet : null;\nexport const deviceType = ExpoDevice ? ExpoDevice.deviceType : null;\nexport const deviceId = ExpoDevice ? ExpoDevice.deviceId : null;\nexport const totalDiskCapacity = ExpoDevice ? ExpoDevice.totalDiskCapacity : null;\nexport const supportedABIs = ExpoDevice ? ExpoDevice.supportedABIs : null;\nexport function hasNotch(): boolean {\n  return devicesWithNotch.some(\n    item =>\n      item.brand.toLowerCase() === ExpoDevice.brand.toLowerCase() &&\n      item.model.toLowerCase() ===\n        (Platform.OS === 'ios' ? modelName.toLowerCase() : ExpoDevice.model.toLowerCase())\n  );\n}\nexport async function getFreeDiskStorageAsync(): Promise<number> {\n  return await ExpoDevice.getFreeDiskStorageAsync();\n}\n\nexport async function getIpAddressAsync(): Promise<string> {\n  return await ExpoDevice.getIpAddressAsync();\n}\n\nexport async function getMACAddressAsync(interfaceName?: string): Promise<string> {\n  if (Platform.OS === 'android') {\n    return await ExpoDevice.getMACAddressAsync(interfaceName);\n  } else {\n    return await ExpoDevice.getMACAddressAsync();\n  }\n}\n\nexport async function isAirplaneModeEnabledAsync(): Promise<boolean | string> {\n  if (!ExpoDevice.isAirplaneModeEnabledAsync) {\n    throw new UnavailabilityError('expo-device', 'isAirplaneModeEnabledAsync');\n  }\n  return await ExpoDevice.isAirplaneModeEnabledAsync();\n}\n\nexport async function hasSystemFeatureAsync(feature: string): Promise<boolean> {\n  if (!ExpoDevice.hasSystemFeatureAsync) {\n    throw new UnavailabilityError('expo-device', 'hasSystemFeatureAsync');\n  }\n  return await ExpoDevice.hasSystemFeatureAsync(feature);\n}\n\nexport async function isPinOrFingerprintSetAsync(): Promise<boolean> {\n  return await ExpoDevice.isPinOrFingerprintSetAsync();\n}\n\nexport async function getUserAgentAsync(): Promise<string> {\n  return await ExpoDevice.getUserAgentAsync();\n}\n\nexport async function getCarrierAsync(): Promise<string> {\n  return await ExpoDevice.getCarrierAsync();\n}\n\nexport async function getTotalDiskCapacityAsync(): Promise<number> {\n  return await ExpoDevice.getTotalDiskCapacityAsync();\n}\n\nexport async function getSerialNumberAsync(): Promise<string> {\n  if (!ExpoDevice.getSerialNumberAsync) {\n    throw new UnavailabilityError('expo-device', 'getSerialNumberAsync');\n  }\n  return await ExpoDevice.getSerialNumberAsync();\n}\n"]}