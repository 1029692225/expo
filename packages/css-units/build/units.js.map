{"version":3,"file":"units.js","sourceRoot":"","sources":["../src/units.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAEhE,SAAS,SAAS,CAAC,KAAU,EAAE,UAAkB;IAC/C,IAAI,OAAO,KAAK,KAAK,QAAQ;QAAE,MAAM,IAAI,SAAS,CAAC,GAAG,UAAU,oBAAoB,CAAC,CAAC;AACxF,CAAC;AACD,MAAM,UAAU,GAAG,CAAC,KAAa;IAC/B,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACxB,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK;QAAE,OAAO,GAAG,KAAK,KAAK,CAAC;IAChD,OAAO,UAAU,CAAC,YAAY,EAAE,GAAG,EAAE,GAAG,KAAK,CAAC;AAChD,CAAC;AAED,MAAM,UAAU,EAAE,CAAC,KAAa;IAC9B,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACvB,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK;QAAE,OAAO,GAAG,KAAK,IAAI,CAAC;IAC/C,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC;AACpB,CAAC;AAED,MAAM,UAAU,EAAE,CAAC,KAAa;IAC9B,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACvB,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,EAAE,CAAC,KAAa;IAC9B,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACvB,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK;QAAE,OAAO,GAAG,KAAK,IAAI,CAAC;IAC/C,MAAM,EAAE,KAAK,EAAE,GAAG,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC3C,OAAO,KAAK,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;AAChC,CAAC;AAED,MAAM,UAAU,EAAE,CAAC,KAAa;IAC9B,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACvB,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK;QAAE,OAAO,GAAG,KAAK,IAAI,CAAC;IAC/C,MAAM,EAAE,MAAM,EAAE,GAAG,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC5C,OAAO,MAAM,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;AACjC,CAAC","sourcesContent":["import { PixelRatio, Platform, Dimensions } from 'react-native';\n\nfunction invariant(value: any, methodName: string) {\n  if (typeof value !== 'number') throw new TypeError(`${methodName} expected a number`);\n}\nexport function rem(value: number): number | string {\n  invariant(value, 'rem');\n  if (Platform.OS === 'web') return `${value}rem`;\n  return PixelRatio.getFontScale() * 16 * value;\n}\n\nexport function em(value: number): number | string {\n  invariant(value, 'em');\n  if (Platform.OS === 'web') return `${value}em`;\n  return rem(value);\n}\n\nexport function px(value: number): number {\n  invariant(value, 'px');\n  return value;\n}\n\nexport function vw(value: number): number | string {\n  invariant(value, 'vw');\n  if (Platform.OS === 'web') return `${value}vw`;\n  const { width } = Dimensions.get('window');\n  return width / (value * 0.01);\n}\n\nexport function vh(value: number): number | string {\n  invariant(value, 'vh');\n  if (Platform.OS === 'web') return `${value}vh`;\n  const { height } = Dimensions.get('window');\n  return height / (value * 0.01);\n}\n"]}