{"version":3,"file":"ViewProps.js","sourceRoot":"","sources":["../src/ViewProps.ts"],"names":[],"mappings":"","sourcesContent":["/***\n * Copyright (c) Expo team.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { ViewStyle } from 'expo-style-sheet/build/ViewStyles';\nimport { ClassAttributes, ComponentProps } from 'react';\nimport {\n  AccessibilityRole,\n  NativeSyntheticEvent,\n  GestureResponderEvent,\n  StyleProp,\n  View as NativeView,\n} from 'react-native';\n\ntype NativeViewProps = ComponentProps<typeof NativeView> & ClassAttributes<typeof NativeView>;\n\ntype AnyResponderEvent = NativeSyntheticEvent<any>;\n\ntype ViewInteractionProps = {\n  // mouse\n  onClick?: (e: AnyResponderEvent) => void;\n  onClickCapture?: (e: AnyResponderEvent) => void;\n  onContextMenu?: (e: AnyResponderEvent) => void;\n  // keyboard\n  onKeyDown?: (e: AnyResponderEvent) => void;\n  onKeyUp?: (e: AnyResponderEvent) => void;\n  // unstable\n  onMouseDown?: (e: AnyResponderEvent) => void;\n  onMouseEnter?: (e: AnyResponderEvent) => void;\n  onMouseLeave?: (e: AnyResponderEvent) => void;\n  onMouseMove?: (e: AnyResponderEvent) => void;\n  onMouseOver?: (e: AnyResponderEvent) => void;\n  onMouseOut?: (e: AnyResponderEvent) => void;\n  onMouseUp?: (e: AnyResponderEvent) => void;\n  onScroll?: (e: AnyResponderEvent) => void;\n  onTouchCancelCapture?: (e: GestureResponderEvent) => void;\n  onTouchMoveCapture?: (e: GestureResponderEvent) => void;\n  onTouchStartCapture?: (e: GestureResponderEvent) => void;\n  onWheel?: (e: AnyResponderEvent) => void;\n};\n\n// Web-specific ViewProps\nexport type WebViewProps = ViewInteractionProps & {\n  /**\n   * https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\n   *\n   * @platform web\n   */\n  tabIndex?: number;\n  /**\n   * @platform web\n   * @unstable\n   */\n  rel?: string;\n  /**\n   * @platform web\n   * @unstable\n   */\n  target?: string;\n  /**\n   * @platform web\n   * @unstable\n   */\n  dataSet?: Record<string, any>;\n};\n\n// Modify any TextProps that have more functionality on web\ntype ModifiedNativeViewProps = Omit<\n  NativeViewProps,\n  'style' | 'selectable' | 'accessibilityRole'\n> & {\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.\n   */\n  accessibilityRole?: 'listitem' | AccessibilityRole;\n  /**\n   * Lets the user select text, to use the native copy and paste functionality.\n   *\n   * @platform web, android\n   */\n  selectable?: boolean;\n};\n\nexport type ViewProps = WebViewProps & ModifiedNativeViewProps;\n"]}