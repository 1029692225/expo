{"version":3,"file":"EventEmitter.js","sourceRoot":"","sources":["../src/EventEmitter.ts"],"names":[],"mappings":"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","sourcesContent":["import invariant from 'invariant';\n// @ts-ignore\nimport { NativeEventEmitter, Platform, TurboModuleRegistry } from 'react-native';\n\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\n\ntype NativeModule = {\n  startObserving?: () => void;\n  stopObserving?: () => void;\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n};\n\n// @ts-ignore\nconst TurboEventEmitter = global.__turboModuleProxy('UMReactNativeEventEmitter');\n\ntype EventListener = (event: any) => void;\n\nexport type Subscription = {\n  eventName: string;\n  listener: EventListener;\n  remove: () => void;\n};\n\nconst listeners = new Map<string, Set<EventListener>>();\n\nconst eventEmitterCallback = (name: string, event: any) => {\n  // console.log('eventEmitterCallback called with ', name, event);\n  const eventListeners = listeners[name];\n  if (eventListeners) {\n    for (const listener of [...eventListeners]) {\n      listener(event);\n    }\n  }\n}\n\nTurboEventEmitter.setListener(eventEmitterCallback);\n\nexport class EventEmitter {\n  _listenerCount = 0;\n  _nativeModule: NativeModule;\n\n  constructor(nativeModule: NativeModule) {\n    this._nativeModule = nativeModule;\n  }\n\n  addListener<T>(eventName: string, listener: (event: T) => void): Subscription {\n    console.log('EventEmitter.addListener', eventName, this._nativeModule);\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n      this._nativeModule.startObserving();\n    }\n    this._nativeModule.addListener(eventName);\n\n    this._listenerCount++;\n    if (!listeners[eventName]) {\n      listeners[eventName] = new Set<EventListener>();\n    }\n    listeners[eventName].add(listener);\n    const subscription = {\n      listener,\n      eventName,\n      remove: () => {\n        this.removeSubscription(subscription);\n      },\n    };\n    return subscription;\n  }\n\n  removeAllListeners(eventName: string): void {\n    console.warn('removeAllListeners');\n    // (listeners[eventName] as Set).\n    // const removedListenerCount = this._eventEmitter.listeners(eventName).length;\n    // this._eventEmitter.removeAllListeners(eventName);\n    // this._listenerCount -= removedListenerCount;\n    invariant(\n      this._listenerCount >= 0,\n      `EventEmitter must have a non-negative number of listeners`\n    );\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  removeSubscription(subscription: Subscription): void {\n    // const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n    // if (!nativeEmitterSubscription) {\n    //   return;\n    // }\n\n    listeners[subscription.eventName].delete(subscription.listener);\n    // this._eventEmitter.removeSubscription(nativeEmitterSubscription!);\n    this._listenerCount--;\n\n    // Ensure that the emitter's internal state remains correct even if `removeSubscription` is\n    // called again with the same subscription\n    // delete subscription[nativeEmitterSubscriptionKey];\n\n    // Release closed-over references to the emitter\n    subscription.remove = () => {};\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  emit(eventName: string, ...params: any[]): void {\n    eventEmitterCallback(eventName, params);\n  }\n}\n"]}