{"version":3,"file":"ExpoOTA.js","sourceRoot":"","sources":["../src/ExpoOTA.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, NativeModulesProxy, UnavailabilityError } from '@unimodules/core';\nimport Constants from 'expo-constants';\n\nconst OTA = NativeModulesProxy.ExpoOta;\n\nconst OTAEventEmitter = new EventEmitter(OTA);\n\ntype Manifest = typeof Constants.manifest;\n\ntype UpdateEvent =\n  | { type: 'downloadStart' | 'downloadProgress' | 'noUpdateAvailable' }\n  | { type: 'downloadFinished'; manifest: Manifest }\n  | { type: 'error'; message: string };\n\ntype UpdateCheckResult = { isAvailable: false } | { isAvailable: true; manifest: Manifest };\n\ntype UpdateEventListener = (event: UpdateEvent) => void;\n\nexport interface UpdatesEventSubscribtion {\n  remove: () => void;\n}\n\ntype UpdateFetchResult = { isNew: false } | { isNew: true; manifest: Manifest };\n\nexport async function checkForUpdateAsync(): Promise<UpdateCheckResult> {\n  if (!OTA.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n  const result = await OTA.checkForUpdateAsync();\n  if (!result) {\n    return { isAvailable: false };\n  }\n\n  return {\n    isAvailable: true,\n    manifest: typeof result === 'string' ? JSON.parse(result) : result,\n  };\n}\n\nexport async function fetchUpdateAsync({\n  eventListener,\n}: { eventListener?: UpdateEventListener } = {}): Promise<UpdateFetchResult> {\n  if (!OTA.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n  let subscription;\n  let result;\n  if (eventListener && typeof eventListener === 'function') {\n    subscription = addListener(eventListener);\n  }\n\n  result = await OTA.fetchUpdateAsync();\n  subscription && subscription.remove();\n\n  if (!result) {\n    return { isNew: false };\n  }\n\n  return {\n    isNew: true,\n    manifest: typeof result === 'string' ? JSON.parse(result) : result,\n  };\n}\n\nexport async function reload() {\n  if (!OTA.reload) {\n    throw new UnavailabilityError('Updates', 'reload');\n  }\n  return OTA.reload();\n}\n\nexport async function reloadFromCache() {\n  console.warn('reloadFromCache is deprecated! Please use reload method instead!');\n  return reload();\n}\n\nexport async function clearUpdateCacheAsync() {\n  if (!OTA.clearUpdateCacheAsync) {\n    throw new UnavailabilityError('Updates', 'clearUpdateCacheAsync');\n  }\n  return OTA.clearUpdateCacheAsync();\n}\n\nexport async function readCurrentManifestAsync() {\n  if (!OTA.readCurrentManifestAsync) {\n    throw new UnavailabilityError('Updates', 'getCustomTabsSupportingBrowsersAsync');\n  }\n  return OTA.readCurrentManifestAsync().then(result =>\n    typeof result === 'string' ? JSON.parse(result) : result\n  );\n}\n\nexport function addListener(listener: UpdateEventListener): UpdatesEventSubscribtion {\n  return OTAEventEmitter.addListener('Exponent.updatesEvent', listener);\n}\n\nexport const EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error',\n};\n"]}