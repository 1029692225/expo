{"version":3,"file":"ExpoOTA.js","sourceRoot":"","sources":["../src/ExpoOTA.ts"],"names":[],"mappings":"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","sourcesContent":["import { NativeModulesProxy, UnavailabilityError, RCTDeviceEventEmitter } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\n\nconst OTA = NativeModulesProxy.ExpoOta;\n\ntype Manifest = typeof Constants.manifest;\n\ntype UpdateEvent =\n| { type: 'downloadStart' | 'downloadProgress' | 'noUpdateAvailable' }\n| { type: 'downloadFinished'; manifest: Manifest }\n| { type: 'error'; message: string };\n\ntype UpdateCheckResult = { isAvailable: false } | { isAvailable: true; manifest: Manifest };\n\ntype UpdateEventListener = (event: UpdateEvent) => void;\n\ntype UpdateFetchResult = { isNew: false } | { isNew: true; manifest: Manifest };\n\nexport async function checkForUpdateAsync(): Promise<UpdateCheckResult> {\n    if (!OTA.checkForUpdateAsync) {\n        throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n    }\n    const result = await OTA.checkForUpdateAsync();\n    if (!result) {\n        return { isAvailable: false };\n    }\n    \n    return {\n        isAvailable: true,\n        manifest: typeof result === 'string' ? JSON.parse(result) : result,\n    };\n}\n\nexport async function fetchUpdateAsync({\n    eventListener,\n}: { eventListener?: UpdateEventListener } = {}): Promise<UpdateFetchResult> {\n    if (!OTA.fetchUpdateAsync) {\n        throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n    }\n    let subscription;\n    let result;\n    if (eventListener && typeof eventListener === 'function') {\n        subscription = addListener(eventListener);\n    }\n    try {\n        result = await OTA.fetchUpdateAsync();\n    } finally {\n        subscription && subscription.remove();\n    }\n    \n    if (!result) {\n        return { isNew: false };\n    }\n    \n    return {\n        isNew: true,\n        manifest: typeof result === 'string' ? JSON.parse(result) : result,\n    };\n}\n\nexport async function reload() {\n    if (!OTA.reload) {\n        throw new UnavailabilityError('WebBrowser', 'reload');\n    }\n    return OTA.reload();\n}\n\nexport async function clearUpdateCacheAsync() {\n    if (!OTA.clearUpdateCacheAsync) {\n        throw new UnavailabilityError('WebBrowser', 'clearUpdateCacheAsync');\n    }\n    return OTA.clearUpdateCacheAsync();\n}\n\nexport async function readCurrentManifestAsync() {\n    if (!OTA.readCurrentManifestAsync) {\n        throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n    }\n    return OTA.readCurrentManifestAsync();\n}\n\nexport function addListener(listener: Function): EventSubscription {\n    let emitter = _getEmitter();\n    return emitter.addListener('Exponent.updatesEvent', listener);\n}\n\nlet _emitter: EventEmitter | null;\n\nfunction _emitEvent(params): void {\n    let newParams = params;\n    if (typeof params === 'string') {\n        newParams = JSON.parse(params);\n    }\n    if (newParams.manifestString) {\n        newParams.manifest = JSON.parse(newParams.manifestString);\n        delete newParams.manifestString;\n    }\n    \n    if (!_emitter) {\n        throw new Error(`EventEmitter must be initialized to use from its listener`);\n    }\n    console.log('They say we emit event. Do we?')\n    _emitter.emit('Exponent.updatesEvent', newParams);\n}\n\nfunction _getEmitter(): EventEmitter {\n    if (!_emitter) {\n        _emitter = new EventEmitter();\n        RCTDeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n    }\n    return _emitter;\n}\n\nexport const EventType = {\n    DOWNLOAD_STARTED: 'downloadStart',\n    DOWNLOAD_PROGRESS: 'downloadProgress',\n    DOWNLOAD_FINISHED: 'downloadFinished',\n    NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n    ERROR: 'error',\n};\n"]}