{"version":3,"file":"ScreenCapture.js","sourceRoot":"","sources":["../src/ScreenCapture.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AACvD,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAElC,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AAEpD,MAAM,UAAU,GAAgB,IAAI,GAAG,EAAE,CAAC;AAE1C;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,OAAO,CAAC,CAAC,iBAAiB,CAAC,oBAAoB,IAAI,CAAC,CAAC,iBAAiB,CAAC,kBAAkB,CAAC;AAC5F,CAAC;AAED;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,CAAC,KAAK,UAAU,yBAAyB,CAAC,MAAc,SAAS;IACrE,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,EAAE;QAC3C,MAAM,IAAI,mBAAmB,CAAC,eAAe,EAAE,2BAA2B,CAAC,CAAC;KAC7E;IAED,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACxB,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACpB,MAAM,iBAAiB,CAAC,oBAAoB,EAAE,CAAC;KAChD;AACH,CAAC;AAED;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,MAAc,SAAS;IACnE,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,EAAE;QACzC,MAAM,IAAI,mBAAmB,CAAC,eAAe,EAAE,yBAAyB,CAAC,CAAC;KAC3E;IAED,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACvB,IAAI,UAAU,CAAC,IAAI,KAAK,CAAC,EAAE;QACzB,MAAM,iBAAiB,CAAC,kBAAkB,EAAE,CAAC;KAC9C;AACH,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,uBAAuB,CAAC,MAAc,SAAS;IAC7D,SAAS,CAAC,GAAG,EAAE;QACb,yBAAyB,CAAC,GAAG,CAAC,CAAC;QAE/B,OAAO,GAAG,EAAE;YACV,uBAAuB,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AACZ,CAAC","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { useEffect } from 'react';\n\nimport ExpoScreenCapture from './ExpoScreenCapture';\n\nconst activeTags: Set<string> = new Set();\n\n/**\n * Returns whether the Screen Capture API is enabled on the current device.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoScreenCapture.preventScreenCapture && !!ExpoScreenCapture.allowScreenCapture;\n}\n\n/**\n * Prevents screenshots and screen recordings. If you are\n * already preventing screen capture, this method does nothing.\n *\n * On iOS, this will only prevent screen recordings, and is only\n * available on iOS 11 and newer. On older iOS versions, this method\n * does nothing.\n *\n * @param key Optional. This will prevent multiple instances of the\n * preventScreenCaptureAsync and allowScreenCaptureAsync methods\n * from conflicting with each other. If provided, you will need to call\n * allowScreenCaptureAsync with the same key in order to re-enable\n * screen capturing. Defaults to 'default'.\n *\n * @example\n * ```typescript\n * preventScreenCaptureAsync();\n * ```\n */\nexport async function preventScreenCaptureAsync(key: string = 'default'): Promise<void> {\n  if (!ExpoScreenCapture.preventScreenCapture) {\n    throw new UnavailabilityError('ScreenCapture', 'preventScreenCaptureAsync');\n  }\n\n  if (!activeTags.has(key)) {\n    activeTags.add(key);\n    await ExpoScreenCapture.preventScreenCapture();\n  }\n}\n\n/**\n * Reallows screenshots and recordings. If you haven't called\n * `preventScreenCapture()` yet, this method does nothing.\n *\n * @param key Optional. This will prevent multiple instances of the\n * preventScreenCaptureAsync and allowScreenCaptureAsync methods\n * from conflicting with each other. If provided, must be the same as the key\n * passed to preventScreenCaptureAsync in order to re-enable\n * screen capturing. Defaults to 'default'.\n *\n * @example\n * ```typescript\n * allowScreenCaptureAsync();\n * ```\n */\nexport async function allowScreenCaptureAsync(key: string = 'default'): Promise<void> {\n  if (!ExpoScreenCapture.allowScreenCapture) {\n    throw new UnavailabilityError('ScreenCapture', 'allowScreenCaptureAsync');\n  }\n\n  activeTags.delete(key);\n  if (activeTags.size === 0) {\n    await ExpoScreenCapture.allowScreenCapture();\n  }\n}\n\n/**\n * React hook for preventing screenshots and screen recordings\n * while the component is mounted.\n *\n * @param key Optional. If provided, this will prevent multiple instances of\n * this hook or the preventScreenCaptureAsync and allowScreenCaptureAsync\n * methods from conflicting with each other. Defaults to 'default'.\n *\n * @example\n * ```typescript\n * usePreventScreenCapture();\n * ```\n */\nexport function usePreventScreenCapture(key: string = 'default'): void {\n  useEffect(() => {\n    preventScreenCaptureAsync(key);\n\n    return () => {\n      allowScreenCaptureAsync(key);\n    };\n  }, [key]);\n}\n"]}