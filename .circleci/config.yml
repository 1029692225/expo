version: 2.1

orbs:
  job-status-change: expo/job-status-change@1.0.11
  slack-job-status-notification: expo/slack-job-status-notification@1.0.6

commands:
  setup:
    steps:
      - checkout
      - run: echo 'export PATH=$PATH:$CIRCLE_WORKING_DIRECTORY/bin' >> $BASH_ENV
      - run: echo '--frozen-lockfile true' >> ~/.yarnrc
  update_submodules:
    steps:
      - run:
          name: Update submodules
          command: git submodule update --init
  git_lfs_pull:
    steps:
      - restore_cache:
          keys:
            - gitlfs-{{ arch }}
            - gitlfs
      - run:
          name: Pull Git LFS files
          command: git lfs pull
      - save_cache:
          key: gitlfs-{{ arch }}
          paths:
            # Save the LFS cache directory to save GitHub bandwidth
            - .git/lfs
  decrypt_secrets_if_possible:
    steps:
      - run:
          name: Decrypt secrets
          command: |
            if [[ ${EXPO_GIT_CRYPT_KEY_BASE64:-unset} = unset ]]; then
              echo 'git-crypt key not present in environment' && exit 0
            fi
            if brew --version; then
              brew install git-crypt
            else
              sudo apt-get install git-crypt
            fi
            git crypt unlock <(echo $EXPO_GIT_CRYPT_KEY_BASE64 | base64 --decode)
  bundle_install:
    steps:
      - setup_ruby
      # replicate direnv "layout ruby"
      - run: echo 'export BUNDLE_BIN=$CIRCLE_WORKING_DIRECTORY/.direnv/bin' >> $BASH_ENV
      - run: echo 'export GEM_HOME=$CIRCLE_WORKING_DIRECTORY/.direnv/ruby' >> $BASH_ENV
      - run: mkdir -p $BUNDLE_BIN; mkdir -p $GEM_HOME
      - run: echo 'export PATH=$PATH:$BUNDLE_BIN:$GEM_HOME/bin' >> $BASH_ENV
      - restore_cache:
          key: gems-v1-{{ arch }}-{{ checksum "Gemfile.lock" }}
      - run: gem install bundler -v=2.1.4
      - run: bundle install
      - save_cache:
          key: gems-v1-{{ arch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - .direnv/ruby
  setup_ruby:
    steps:
      - run:
          name: install chruby if necessary
          command: |
            if ! which chruby > /dev/null; then
              VERSION=0.3.9
              curl --silent --location "https://github.com/postmodern/chruby/archive/v$VERSION.tar.gz" --output chruby.tar.gz
              tar -xzvf chruby.tar.gz
              rm chruby.tar.gz
              cd "chruby-$VERSION"
              sudo make install
              echo "source /usr/local/share/chruby/chruby.sh" >> $BASH_ENV
            fi
      - restore_cache:
          key: ruby-v1-{{ arch }}-{{ checksum ".ruby-version" }}
      - run:
          name: install ruby if necessary
          command: |
            if ! chruby $(cat .ruby-version); then
              VERSION=0.7.0
              curl --silent --location "https://github.com/postmodern/ruby-install/archive/v$VERSION.tar.gz" --output ruby-install.tar.gz
              tar -xzvf ruby-install.tar.gz
              rm ruby-install.tar.gz
              "ruby-install-$VERSION/bin/ruby-install" --no-reinstall ruby $(cat .ruby-version)
              rm -r "ruby-install-$VERSION"
            fi
      - save_cache:
          key: ruby-v1-{{ arch }}-{{ checksum ".ruby-version" }}
          paths:
            - ~/.rubies
      - run: echo "chruby $(cat .ruby-version)" >> $BASH_ENV

executors:
  mac:
    macos: # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
      xcode: '11.5.0'
    working_directory: /Users/distiller/project
    environment:
      BASH_ENV: /Users/distiller/.bash_profile
      # Homebrew settings
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
      # fastlane complains if these are not set
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      FASTLANE_SKIP_UPDATE_CHECK: 1
      FASTLANE_DISABLE_COLORS: 1
      CI: 1
      # Prevent automatic download of LFS files
      GIT_LFS_SKIP_SMUDGE: 1

workflows:
  ios:
    jobs:
      - client_ios

jobs:
  client_ios:
    executor: mac
    steps:
      - setup
      - update_submodules
      - git_lfs_pull
      - decrypt_secrets_if_possible
      - run:
          name: Generate dynamic macros
          command: expotools ios-generate-dynamic-macros
      - bundle_install
      - run:
          name: Build
          command: fastlane ios create_simulator_build
      - run:
          name: Unit tests
          command: fastlane scan
          working_directory: ~/project/ios
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results
            find . -type f -regex ".*/test_output/.*" -exec cp {} ~/test-results/ \;
          when: always
      - persist_to_workspace:
          root: ios
          paths:
            - simulator-build
      - store_artifacts:
          path: ~/Library/Logs/fastlane/
      - store_test_results:
          path: ~/test-results
      - job-status-change/status
      - slack-job-status-notification/notify:
          only_for_branches: master sdk-*
          slack_webhook: $SLACK_IOS_WEBHOOK
